---
version: 0.2
phases:
  install:
    runtime-versions:
      nodejs: latest
      golang: latest
    commands:
      - TEMP_ROLE=`aws sts assume-role --role-arn $CODE_BUILD_SERVICE_ROLE_ARN --role-session-name test`
      - export TEMP_ROLE
      - echo $TEMP_ROLE
      - export AWS_ACCESS_KEY_ID=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.AccessKeyId')
      - export AWS_SECRET_ACCESS_KEY=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SecretAccessKey')
      - export AWS_SESSION_TOKEN=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SessionToken')
      - echo $AWS_ACCESS_KEY_ID
      - echo $AWS_SECRET_ACCESS_KEY
      - echo $AWS_SESSION_TOKEN
      - git clone --depth=1 https://github.com/docker-library/bashbrew; (cd bashbrew; go mod download; ./bashbrew.sh --version; cp bin/bashbrew /usr/local/bin/); rm -rf bashbrew
      - git clone --depth=1 https://github.com/estesp/manifest-tool; (cd manifest-tool; make build; cp manifest-tool /usr/local/bin/); rm -rf manifest-tool
  pre_build:
    commands:
      - if [ "${REGISTRYSERVER}" == public.ecr.aws ]; then aws ecr-public get-login-password | docker login --username AWS --password-stdin "${REGISTRYSERVER}/${REGISTRYOWNER}"; fi
  build:
    commands:
      - bashbrew --debug --library "${CODEBUILD_SRC_DIR}/images" build satosa
  post_build:
    commands:
      - bashbrew --debug --library "${CODEBUILD_SRC_DIR}/images" tag --target-namespace "${REGISTRYSERVER}/${REGISTRYOWNER}" satosa
      - bashbrew --debug --library "${CODEBUILD_SRC_DIR}/images" push --target-namespace "${REGISTRYSERVER}/${REGISTRYOWNER}" satosa
      - bashbrew --debug --library "${CODEBUILD_SRC_DIR}/images" --arch-namespace amd64="${REGISTRYSERVER}/${REGISTRYOWNER}" put-shared --target-namespace "${REGISTRYSERVER}/${REGISTRYOWNER}" --single-arch satosa
